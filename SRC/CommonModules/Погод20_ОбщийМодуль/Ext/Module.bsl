#Область Локация

// Функция - Локация организации
//
// Параметры:
//  рефОрганизация	 - СправочникСсылка - (IN) Cсылка на организацию
//  стЛокация		 - Структура - (OUT) Структура с данными:
//		* СтранаНаименование - Строка - Наименование страны
//		* СтранаКодАльфа - Строка - Код страны по Альфа-2
//		* Область - Строка - Наименование области без префикса
//		* Город - Строка- Наименование города, населенного пункта или города федерального значения
// 
// Возвращаемое значение:
//  Булево - признак успешного выполнения
//
Функция ЛокацияОрганизации(Знач рефОрганизация, стЛокация)
	Перем бВыполненоБезОшибок;
	Перем тзКИ, рефВидКИ, сАдрXML;
	Перем стОписаниеСтраны, стОписаниеАдреса, стПараметры;
	
	бВыполненоБезОшибок = Ложь;
	
	стЛокация = Новый Структура();
	стЛокация.Вставить("СтранаНаименование","");
	стЛокация.Вставить("СтранаКодАльфа","");
	стЛокация.Вставить("Область","");
	стЛокация.Вставить("Город","");
	
	Если ТипЗнч(рефОрганизация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	рефВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
	тзКИ = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(рефОрганизация,рефВидКИ,,Ложь);
	Если ТипЗнч(тзКИ) = Тип("ТаблицаЗначений") И тзКИ.Количество() > 0 Тогда
		сАдрXML = тзКИ[0].ЗначенияПолей;
	Иначе
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Попытка
		стОписаниеСтраны = УправлениеКонтактнойИнформацией.СтранаАдресаКонтактнойИнформации(сАдрXML);
	Исключение
	    Возврат бВыполненоБезОшибок;
	КонецПопытки;
	
	Если ТипЗнч(стОписаниеСтраны) <> Тип("Структура") 
			ИЛИ НЕ стОписаниеСтраны.Свойство("Наименование") 
			ИЛИ НЕ стОписаниеСтраны.Свойство("КодАльфа2") Тогда
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	стЛокация.СтранаНаименование = стОписаниеСтраны.Наименование;
	стЛокация.СтранаКодАльфа = стОписаниеСтраны.КодАльфа2;
	
	стПараметры = Новый Структура();
	стПараметры.Вставить("БезПредставлений", Истина);
	стПараметры.Вставить("КодыКЛАДР", Ложь);
	стПараметры.Вставить("ПолныеНаименованияСокращений", Ложь);
	стПараметры.Вставить("НаименованиеВключаетСокращение", Ложь);
	
	Попытка
		стОписаниеАдреса = РаботаСАдресами.СведенияОбАдресе(сАдрXML, стПараметры);
	Исключение
	    Возврат бВыполненоБезОшибок;
	КонецПопытки;
	
	Если ТипЗнч(стОписаниеАдреса) <> Тип("Структура") Тогда
		Возврат бВыполненоБезОшибок;
	Иначе
		стЛокация.Область = ОбластьЛокации(стОписаниеАдреса);
		стЛокация.Город = ГородЛокации(стОписаниеАдреса);
	КонецЕсли;
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

Функция ГородЛокации(Знач стОписаниеАдреса)
	Перем сГород;
	
	сГород = "";
	
	// ЭТО ГОРОД ФЕД. ЗНАЧЕНИЯ
	Если ЭтоГородФедЗначения(стОписаниеАдреса) Тогда
		сГород = ?(стОписаниеАдреса.Свойство("Регион"), стОписаниеАдреса.Регион, "");
		Возврат сГород;
	КонецЕсли;
	
	// ЭТО ГОРОД
	Если ЭтоГород(стОписаниеАдреса) Тогда
		сГород = ?(стОписаниеАдреса.Свойство("Город"), стОписаниеАдреса.Город, "");
		Возврат сГород;
	КонецЕсли;
	
	// ЭТО НАСЕЛЕННЫЙ ПУНКТ
	Если ЭтоНаселенныйПункт(стОписаниеАдреса) Тогда
		сГород = ?(стОписаниеАдреса.Свойство("НаселенныйПункт"), стОписаниеАдреса.НаселенныйПункт, "");
		Возврат сГород;
	КонецЕсли;
	
	Возврат сГород;
КонецФункции

Функция ОбластьЛокации(Знач стОписаниеАдреса)
	Перем сОбласть;
	
	сОбласть = "";
	
	Если стОписаниеАдреса.Свойство("КодРегиона") И ЭтоГородФедЗначения(стОписаниеАдреса) Тогда
		сОбласть = "";
	Иначе
		сОбласть = ?(стОписаниеАдреса.Свойство("Регион"), стОписаниеАдреса.Регион, "");
	КонецЕсли;
	
	Возврат сОбласть;
КонецФункции

Функция ЭтоГородФедЗначения(Знач стОписаниеАдреса)
	Перем бГородФедЗначения, сзГородаФедЗначения;
	
	бГородФедЗначения = Ложь;
	Если ТипЗнч(стОписаниеАдреса) <> Тип("Структура") ИЛИ НЕ стОписаниеАдреса.Свойство("КодРегиона")Тогда
		Возврат бГородФедЗначения;
	КонецЕсли;
	
	сзГородаФедЗначения = Новый СписокЗначений();
	сзГородаФедЗначения.Добавить("77", "Москва");
	сзГородаФедЗначения.Добавить("78", "Санкт-Петербург");
	сзГородаФедЗначения.Добавить("92", "Севастополь");
	
	Если сзГородаФедЗначения.НайтиПоЗначению(стОписаниеАдреса.КодРегиона) <> Неопределено Тогда
		бГородФедЗначения = Истина;
	КонецЕсли;
	
	Возврат бГородФедЗначения;
КонецФункции

Функция ЭтоГород(Знач стОписаниеАдреса)
	Перем бГород;
	
	бГород = Ложь;
	Если ТипЗнч(стОписаниеАдреса) <> Тип("Структура") ИЛИ НЕ стОписаниеАдреса.Свойство("Город") Тогда
		Возврат бГород;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(стОписаниеАдреса.Город) Тогда
		бГород = Истина;
	КонецЕсли;
	
	Возврат бГород;
КонецФункции

Функция ЭтоНаселенныйПункт(Знач стОписаниеАдреса)
	Перем бНаселенныйПункт;
	
	бНаселенныйПункт = Ложь;
	Если ТипЗнч(стОписаниеАдреса) <> Тип("Структура") ИЛИ НЕ стОписаниеАдреса.Свойство("НаселенныйПункт") Тогда
		Возврат бНаселенныйПункт;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(стОписаниеАдреса.НаселенныйПункт) Тогда
		бНаселенныйПункт = Истина;
	КонецЕсли;
	
	Возврат бНаселенныйПункт;	
КонецФункции

#КонецОбласти 

#Область Поставщик_погоды_OWM

// Функция - API key OWM
// 
// Возвращаемое значение:
//  Строка - API key OpenWeatherMap
//
Функция API_Key_OWM()
	Возврат "907e7930b2d2cf9c59516b5479d4629e";
КонецФункции

Функция АдресСервера_OWM()
	Возврат "api.openweathermap.org";	
КонецФункции

Функция АдресРесурса_OWM()
	Возврат "/data/2.5";	
КонецФункции

Функция Параметры_OWM(стЛокация)
	Перем сПараметры;
	
	// /forecast?q={city name},{country code}&mode={xml,JSON}&units={metric,imperial}&lang={ru}&APPID={APIKEY} 
	
	сПараметры = "/forecast?q=%1,%2&mode=%3&units=%4&lang=%5&APPID=%6";
	сПараметры = СтрШаблон(сПараметры,
							стЛокация.Город,
							НРег(стЛокация.СтранаКодАльфа),
							"JSON",
							"metric",
							"ru",
							API_Key_OWM());
	
	Возврат сПараметры;
КонецФункции

// Функция - Прогноз погоды от поставщика OWM
//
// Параметры:
//  стЛокация	 - Структура - (IN) локация организации
//  стДанные	 - Структура - (IN/OUT) данные прогноза погоды
// 
// Возвращаемое значение:
//  Булево - признак успешного выполнения
//
Функция Прогноз_OWM(Знач стЛокация, стДанные)
	Перем бВыполненоБезОшибок, сТекстОшибки;
	Перем оСоединение, сАдресРесурса, сТекстОтвета;
	
	бВыполненоБезОшибок = Ложь;	
	
	оСоединение = ПолучитьHTTPСоединение(АдресСервера_OWM(), Ложь);
	Если оСоединение = Неопределено Тогда
   		сТекстОшибки = "Не удалось получить прогноз OWM.
		|  Функция: Прогноз_OWM
		|  Описание ошибки: Http соединение не установлено.";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	сТекстОтвета = "";
	сАдресРесурса = АдресРесурса_OWM() + Параметры_OWM(стЛокация);	
	Если НЕ ВыполнитьЗапросGet(оСоединение, сАдресРесурса, сТекстОтвета) Тогда
   		сТекстОшибки = "Не удалось получить прогноз OWM.
		|  Функция: Прогноз_OWM
		|  Описание ошибки: GET запрос выполнен с ошибкой.";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);
		оСоединение = Неопределено;
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	оСоединение = Неопределено;
	
	Если НЕ(ТипЗнч(сТекстОтвета) = Тип("Строка") И НЕ ПустаяСтрока(сТекстОтвета)) Тогда
   		сТекстОшибки = "Не удалось получить прогноз OWM.
		|  Функция: Прогноз_OWM
		|  Описание ошибки: Ответ пустая строка.";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Если НЕ ДанныеСервераOWM_ВСтруктуру(сТекстОтвета, стЛокация, стДанные) Тогда
   		сТекстОшибки = "Не удалось получить прогноз OWM.
		|  Функция: Прогноз_OWM
		|  Описание ошибки: Не удалось разобрать ответ сервера в структуру.";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

// Функция - Данные сервера OWM в структуру данных
//
// Параметры:
//  сТекстОтвета - Строка - (IN) JSON ответ сервера OWM
//	стЛокация - Структура - (IN) локация организации
//  стДанные	 - Структура - (IN/OUT) структура с данными прогноза
// 
// Возвращаемое значение:
//  Булево - признак успешного выполнения
//
Функция ДанныеСервераOWM_ВСтруктуру(Знач сТекстОтвета, Знач стЛокация, стДанные)
	Перем бВыполненоБезОшибок, сТекстОшибки;
	Перем оЧтениеJSON, соДанныеСервера, мПоляДата, чШирота, чДолгота, соПрогноз, стПрогноз;
	Перем КОЛИЧЕСТВОПРОГНОЗОВ;
	
	// КОНСТАНТЫ
	КОЛИЧЕСТВОПРОГНОЗОВ = 4;
	
	бВыполненоБезОшибок = Ложь;

	Если НЕ(ТипЗнч(стДанные) = Тип("Структура") И стДанные.Количество() > 0) Тогда
  		сТекстОшибки = "Не удалось преобразовать данные сервера в структуру.
		|  Функция: ДанныеСервераOWM_ВСтруктуру
		|  Описание ошибки: ошибка в структуре данных ""стДанные"" ";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);		
		Возврат бВыполненоБезОшибок;		
	КонецЕсли;
		
	Если НЕ (ТипЗнч(сТекстОтвета) = Тип("Строка") И НЕ ПустаяСтрока(сТекстОтвета)) Тогда
   		сТекстОшибки = "Не удалось преобразовать данные сервера в структуру.
		|  Функция: ДанныеСервераOWM_ВСтруктуру
		|  Описание ошибки: Ответ сервера пустая строка.";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);		
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	оЧтениеJSON = Новый ЧтениеJSON();
	оЧтениеJSON.УстановитьСтроку(сТекстОтвета);
	мПоляДата = Новый Массив();
	мПоляДата.Добавить("dt");
	Попытка
		соДанныеСервера = ПрочитатьJSON(оЧтениеJSON, Истина,,, "ВосстановлениеДаты", Погод20_ОбщийМодуль,, мПоляДата);
	Исключение
   		сТекстОшибки = "Не удалось преобразовать данные сервера в структуру.
		|  Функция: ДанныеСервераOWM_ВСтруктуру
		|  Описание ошибки: Не удалось прочитать JSON. %1";
		сТекстОшибки = СтрШаблон(сТекстОшибки, ОписаниеОшибки());
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);		
		Возврат бВыполненоБезОшибок;
	КонецПопытки;
	
	стДанные.СтранаКод = НРег(стЛокация.СтранаКодАльфа);
	стДанные.Город = стЛокация.Город;
	чШирота = соДанныеСервера.Get("city").Get("coord").Get("lat");
	чДолгота = соДанныеСервера.Get("city").Get("coord").Get("lon");
	стДанные.ГородШирота = чШирота;
	стДанные.ГородДолгота = чДолгота;
	стДанные.ТаймЗона = ТаймЗона(чШирота, чДолгота);
	
	Для чПрогноз = 0 По КОЛИЧЕСТВОПРОГНОЗОВ - 1 Цикл
		соПрогноз = соДанныеСервера.Get("list").Get(чПрогноз * 2);
		стПрогноз = стДанные.Прогноз.Get(чПрогноз);
		
		стПрогноз.ДатаПрогноза = "";
		стПрогноз.ВремяСуток = "";
		стПрогноз.Температура = "";
		стПрогноз.ПогодаИД = "";
		стПрогноз.ПогодаОписание = "";		
	КонецЦикла;
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

#КонецОбласти

// Функция - Данные погоды для заполнения виджета
//
// Параметры:
//  стЛокация	 - СправочникСсылка - (IN) Ссылка на организацию
//  стДанные	 - Структура - (IN/OUT) Данные погоды
// 
// Возвращаемое значение:
//  Булево - признак успешного выполнения
//
Функция ДанныеПогоды(Знач рефОрганизация, стДанные) Экспорт
	Перем бВыполненоБезОшибок, стЛокация;
	Перем ПОСТАВЩИК;
	
	// КОНСТАНТЫ
	ПОСТАВЩИК = "OWM";
	
	бВыполненоБезОшибок = Ложь;
	
	Если ТипЗнч(рефОрганизация) <> Тип("СправочникСсылка.Организации") ИЛИ рефОрганизация = Справочники.Организации.ПустаяСсылка() Тогда
		сТекстОшибки = "Не удалось получить данные прогноза.
		|  Функция: ДанныеПогоды
		|  Описание ошибки: Не получена организация.";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);		
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	стЛокация = Новый Структура();
	Если НЕ ЛокацияОрганизации(рефОрганизация,стЛокация) Тогда
		сТекстОшибки = "Не удалось получить данные прогноза.
		|  Функция: ДанныеПогоды
		|  Описание ошибки: Не получена локация организации %1.";
		сТекстОшибки = СтрШаблон(сТекстОшибки, Строка(рефОрганизация));
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);		
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	стДанные = Инициализировать_стДанные();
	Если ПОСТАВЩИК = "OWM" Тогда
		Если НЕ Прогноз_OWM(стЛокация, стДанные) Тогда
			Возврат бВыполненоБезОшибок;
		КонецЕсли;
		//
	ИначеЕсли ПОСТАВЩИК = "YND" Тогда
		//
	Иначе
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
		
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

#Область Служебные_методы

// Функция - Получить HTTP/HTTPS соединение
//
// Параметры:
//  сАдресСервера	 - Строка - адрес сервера
//  бHTTS			 - Булево - признак установки защищенного соединения
// 
// Возвращаемое значение:
//  HTTPСоединение - соединение
//
Функция ПолучитьHTTPСоединение(Знач сАдресСервера, Знач бHTTS = Ложь)
	Перем ТипСоединения, оСоединение, сТекстОшибки;
	
	оСоединение = Неопределено;
	Попытка
		ТипСоединения = ?(бHTTS, Новый ЗащищенноеСоединениеOpenSSL(Неопределено,Неопределено), Неопределено);
		оСоединение=Новый HTTPСоединение(сАдресСервера,,,,,,ТипСоединения);
	Исключение
		сТекстОшибки = "Не удалось установить HTTP соединение с %1
		|  Функция: УстановитьHTTPСоединение
		|  Описание ошибки: %2";
		сТекстОшибки = СтрШаблон(сТекстОшибки, сАдресСервера, ОписаниеОшибки());
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);
	КонецПопытки;
	
	Возврат оСоединение;
КонецФункции

// Функция - Выполнить запрос GET и получить тело ответа
//
// Параметры:
//  оСоединение		 - HTTPСоединение - (IN) HTTP соединение
//  сАдресРесурса	 - Строка - (IN) адрес ресурса
//  сТекстОтвета	 - Строка - (OUT) тело ответа
// 
// Возвращаемое значение:
//  Булево - признак успешного выполнения
//
Функция ВыполнитьЗапросGet(Знач оСоединение, Знач сАдресРесурса, сТекстОтвета)
	Перем оЗапрос, оОтвет, бВыполненоБезОшибок, сТекстОшибки;
	
	бВыполненоБезОшибок = Ложь;
	сТекстОтвета = "";
	
	Если оСоединение = Неопределено Тогда
   		сТекстОшибки = "Не удалось выполнить GET запрос. Http соединение не установлено.
		|  Функция: ВыполнитьЗапросGet";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	Если ТипЗнч(сАдресРесурса) <> Тип("Строка") ИЛИ ПустаяСтрока(сАдресРесурса) Тогда
   		сТекстОшибки = "Не удалось выполнить GET запрос. Ресурс пустая строка.
		|  Функция: ВыполнитьЗапросGet";
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);		
		Возврат бВыполненоБезОшибок;
	КонецЕсли;
	
	оЗапрос = Новый HTTPЗапрос();
	оЗапрос.АдресРесурса = сАдресРесурса;
	оОтвет = Неопределено;
	Попытка
		оОтвет = оСоединение.Получить(оЗапрос);
	Исключение
   		сТекстОшибки = "Не удалось выполнить GET запрос к ресурсу %1
		|  Функция: ВыполнитьЗапросGet
		|  Описание ошибки: %2";
		сТекстОшибки = СтрШаблон(сТекстОшибки, сАдресРесурса, ОписаниеОшибки());
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;
	КонецПопытки;
	
	Если НЕ оОтвет.КодСостояния = 200 Тогда
	  	сТекстОшибки = "GET запрос к ресурсу %1 выполнен с ошибкой
		|  Функция: ВыполнитьЗапросGet
		|  Описание ошибки: Код состояния %2";
		сТекстОшибки = СтрШаблон(сТекстОшибки, сАдресРесурса, оОтвет.КодСостояния);
		SaveToJournal(СобытиеЖР(),сТекстОшибки,2);
		Возврат бВыполненоБезОшибок;	
	Иначе
		сТекстОтвета = оОтвет.ПолучитьТелоКакСтроку();
	КонецЕсли;
	
	бВыполненоБезОшибок = Истина;
	Возврат бВыполненоБезОшибок;
КонецФункции

// Функция - Тайм зона определяет TimeZone в часах
//
// Параметры:
//  latitude	 - Число - Широта
//  longitude	 - Число - Долгота
// 
// Возвращаемое значение:
//  Число - отклонение в часах от GMT
//
Функция ТаймЗона(latitude, longitude)
	Перем чТаймЗона;
	
	// https://developers.google.com/maps/documentation/timezone/intro?hl=ru
	
	чТаймЗона = 0;
	Возврат чТаймЗона;
КонецФункции

Функция ВосстановлениеДаты(Свойство, Значение, ДополнительныеПараметры) Экспорт
	Возврат ПрочитатьДатуJSON("new Date("+Формат(Значение * 1000, "ЧГ=")+")", ФорматДатыJSON.JavaScript);	
КонецФункции

Функция Инициализировать_стДанные()
	Перем стДанные, чПрогноз, стПрогноз, мПрогноз;
	Перем КОЛИЧЕСТВОПРОГНОЗОВ;
	
	// КОНСТАНТЫ
	КОЛИЧЕСТВОПРОГНОЗОВ = 4;
	
	стДанные = Новый Структура();	
	стДанные.Вставить("СтранаКод","");
	стДанные.Вставить("Город","");
	стДанные.Вставить("ГородШирота",0);
	стДанные.Вставить("ГородДолгота",0);
	стДанные.Вставить("ТаймЗона",0);
	стДанные.Вставить("Прогноз",Новый Массив());
	
	Для чПрогноз = 0 По КОЛИЧЕСТВОПРОГНОЗОВ - 1 Цикл
		стПрогноз = Новый Структура();
		стПрогноз.Вставить("ДатаПрогноза",Дата(1,1,1));
		стПрогноз.Вставить("ВремяСуток","");
		стПрогноз.Вставить("Температура",0);
		стПрогноз.Вставить("ПогодаИД","");
		стПрогноз.Вставить("ПогодаОписание","");
		стДанные.Прогноз.Добавить(стПрогноз);
	КонецЦикла;
	
	Возврат стДанные;	
КонецФункции

Функция ВремяСуток(дДата)
	Перем сВремяСуток, чЧас;
	
	сВремяСуток = "";
	
	Если ТипЗнч(дДата) <> Тип("Дата") ИЛИ дДата = Дата(1,1,1) Тогда
		Возврат сВремяСуток;
	КонецЕсли;
	
	чЧас = Час(дДата);
	Если чЧас >= 0 И чЧас < 6 Тогда
		сВремяСуток = "ночью"
	ИначеЕсли чЧас >= 6 И чЧас < 12 Тогда
		сВремяСуток = "утром"
	ИначеЕсли чЧас >= 12 И чЧас < 18 Тогда
		сВремяСуток = "днем"
	ИначеЕсли чЧас >= 18 И чЧас <= 23  Тогда
		сВремяСуток = "вечером"
	КонецЕсли;
	
	Возврат сВремяСуток;
КонецФункции

#КонецОбласти

#Область Константы

Функция ВерсияРасширения()
	Возврат	"2-0-005"
КонецФункции

Функция ДатаРасширения()
	Возврат "08.03.2018"	
КонецФункции

Функция СобытиеЖР()
	Перем сТекст;
	
	сТекст = "Расширение ""Погодка 2.0"" %1%2";
	сТекст = СтрШаблон(сТекст, " | "+ ВерсияРасширения(), " от " + ДатаРасширения());
	
	Возврат сТекст;
КонецФункции

// Процедура - Записать в Журнал регистрации (Сервер)
//
// Параметры:
//  сСобытие		 - Строка - Наименование события
//  сСообщение		 - Строка - Текст сообщения
//  чТипСообщения	 - Число - Тип сообщения:
//		* 1 - Информация
//		* 2 - Предупреждение
//		* 3 - Ошибка
//		* 4 - Примечание
//
Процедура SaveToJournal(Val сСобытие = "", Val сСообщение = "", Val чТипСообщения = 1)
	VAR sEvent, oMsgType, сТекст;
	
	IF (TypeOf(сСообщение) = Type("String")) AND (NOT IsBlankString(сСообщение)) THEN
		sEvent = ?(IsBlankString(сСобытие), "Х.З.", сСобытие);
		
		IF чТипСообщения = 1 THEN
			oMsgType = УровеньЖурналаРегистрации.Информация;
		ELSIF чТипСообщения = 2 THEN
			oMsgType = УровеньЖурналаРегистрации.Предупреждение;
		ELSIF чТипСообщения = 3 THEN
			oMsgType = УровеньЖурналаРегистрации.Ошибка;
		ELSIF чТипСообщения = 4 THEN
			oMsgType = УровеньЖурналаРегистрации.Примечание;
		ELSE
			oMsgType = УровеньЖурналаРегистрации.Предупреждение;
		ENDIF;
		
		ЗаписьЖурналаРегистрации(sEvent, oMsgType,,, сСообщение);
	ENDIF;
	
КонецПроцедуры

#КонецОбласти