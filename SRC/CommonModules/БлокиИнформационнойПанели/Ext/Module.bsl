#Область ПрограммныйИнтерфейс

// Возвращает таблицу свойств предопределенных блоков
//
// Возвращаемое значени:
//   ТаблицаЗначений - описание полей см. в методе НоваяТаблицаБлоков()
//
&Вместо("ПредопределенныеБлоки")
Функция ВидБух_ПредопределенныеБлоки() Экспорт
	
	ТаблицаБлоков = НоваяТаблицаБлоков();
	
	ИспользуетсяРазделениеДанных = ТехнологияСервисаИнтеграцияСБСП.ДоступноИспользованиеРазделенныхДанных()
		И ТехнологияСервисаИнтеграцияСБСП.РазделениеВключено();
	
	// Монитор основных показателей
	Если ОстаткиДенежныхСредствДоступны() Тогда
		ДобавитьОстаткиДенежныхСредств(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПокупателиДоступны() Тогда
		ДобавитьПокупатели(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПоставщикиДоступны() Тогда
		ДобавитьПоставщики(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПродажиДоступны() Тогда
		ДобавитьПродажи(ТаблицаБлоков);
	КонецЕсли;
	
	// ВИДЖЕТЫ ПОЛЬЗОВАТЕЛЯ
	Если ПОЛЬЗ0_Доступен() Тогда
		ДобавитьПОЛЬЗ0(ТаблицаБлоков);
	КонецЕсли;

	Если ПОЛЬЗ1_Доступен() Тогда
		ДобавитьПОЛЬЗ1(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПОЛЬЗ2_Доступен() Тогда
		ДобавитьПОЛЬЗ2(ТаблицаБлоков);
	КонецЕсли;
	
	// Список задач
	Если ЗадачиДоступны() Тогда
		ДобавитьЗадачи(ТаблицаБлоков);
	КонецЕсли;
	
	// 1С-Отчетность
	Если ОтчетностьДоступна() Тогда
		ДобавитьОтчетность(ТаблицаБлоков);
	КонецЕсли;
	
	// БИП
	Если ОбработкаНовостейПовтИсп.РазрешенаРаботаСНовостямиТекущемуПользователю() Тогда
		ДобавитьНовости(ТаблицаБлоков);
	КонецЕсли;
	
	Если МетодическаяПоддержкаДоступна() Тогда
		ДобавитьМетодическаяПоддержка(ТаблицаБлоков);
	КонецЕсли;
	
	Если ИспользуетсяРазделениеДанных Тогда
		ДобавитьПоддержкаСервиса(ТаблицаБлоков);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьСервисСПАРКРиски")
		И СПАРКРиски.ИспользованиеРазрешено() Тогда
		Добавить1СПАРКРиски(ТаблицаБлоков);
	КонецЕсли;
	
	Возврат ТаблицаБлоков;
	
КонецФункции

#КонецОбласти

#Область ДанныеИнформационнойПанели

#Область ПОЛЬЗ0

// Функция - Управление доступностью блока
// 
// Возвращаемое значение:
//  Булево - Если Истина, то виджет доступен
//
Функция ПОЛЬЗ0_Доступен()
	
	Возврат Истина;
	
КонецФункции

// Функция - Свойства информационного блока
//	Поля блока, перечисленные в методе должны совпадать с реквизитами формы
// 
// Возвращаемое значение:
//  Строка - поля блока через ","
//
Функция СвойстваПОЛЬЗ0()
	Перем сСвойства;
	
	сСвойства = " ПОЛЬЗ0_Заголовок, 
				| ПОЛЬЗ0_Город,
				//
				| ПОЛЬЗ0_ВремяСуток_0,
				| ПОЛЬЗ0_Температура_0,
				| ПОЛЬЗ0_ПогодаКартинка_0,
				| ПОЛЬЗ0_ПогодаОписание_0,
				//
				| ПОЛЬЗ0_ВремяСуток_1,
				| ПОЛЬЗ0_Прогноз_1,
				//
				| ПОЛЬЗ0_ВремяСуток_2,
				| ПОЛЬЗ0_Прогноз_2,
				//
				| ПОЛЬЗ0_ВремяСуток_3,
				| ПОЛЬЗ0_Прогноз_3";
	
	Возврат сСвойства;
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   стПараметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ПОЛЬЗ0(стПараметры) Экспорт
	Перем Шрифт, ЦветТекста, бВыполненоБезОшибок;
	Перем стДанные;
	
	Если стПараметры.Инициализация Тогда
		Возврат;
	КонецЕсли;
	////////////////////////////////////////////////////////////////////////////////	
	
	бВыполненоБезОшибок = Ложь;
	Если ТипЗнч(стПараметры.Организация) = Тип("СправочникСсылка.Организации") И стПараметры.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		стДанные = Новый Структура();
		Если Погод20_ОбщийМодуль.ДанныеПогоды(стПараметры.Организация, стДанные) Тогда
			бВыполненоБезОшибок = Истина
		КонецЕсли;	
	КонецЕсли;
	
	////////////////////////////////////////////////////////////////////////////////
	
	Если НЕ бВыполненоБезОшибок Тогда
		Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
		стДанные = Новый Структура();
		стДанные.Вставить("ПОЛЬЗ0_Заголовок", Новый ФорматированнаяСтрока("ПОГОДКА 2.0 | ОШИБКА"));
		стДанные.Вставить("ПОЛЬЗ0_Город", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ВремяСуток_0", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_Температура_0", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ПогодаКартинка_0", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ПогодаОписание_0", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ВремяСуток_1", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_Прогноз_1", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ВремяСуток_2", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_Прогноз_2", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ВремяСуток_3", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_Прогноз_3", Новый ФорматированнаяСтрока(""));		
	Иначе
		Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
		ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
		стДанные = Новый Структура();
		стДанные.Вставить("ПОЛЬЗ0_Заголовок", Новый ФорматированнаяСтрока("ПОГОДКА 2.0 | OK"));
		стДанные.Вставить("ПОЛЬЗ0_Город", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ВремяСуток_0", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_Температура_0", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ПогодаКартинка_0", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ПогодаОписание_0", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ВремяСуток_1", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_Прогноз_1", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ВремяСуток_2", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_Прогноз_2", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_ВремяСуток_3", Новый ФорматированнаяСтрока(""));
		стДанные.Вставить("ПОЛЬЗ0_Прогноз_3", Новый ФорматированнаяСтрока(""));		
	КонецЕсли;	
		
	////////////////////////////////////////////////////////////////////////////////
	
	ПоместитьВоВременноеХранилище(стДанные, стПараметры.АдресХранилища);
	
КонецПроцедуры

Процедура ПОЛЬЗ0_Обновить(стПараметры) Экспорт
		
КонецПроцедуры

Процедура ДобавитьПОЛЬЗ0(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПОЛЬЗ0(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПОЛЬЗ0(),
		"БлокиИнформационнойПанели.ПОЛЬЗ0",
		"БлокиИнформационнойПанели.ПОЛЬЗ0_Обновить",
		СвойстваПОЛЬЗ0());
	
КонецПроцедуры
	
#КонецОбласти

#Область ПОЛЬЗ1

// Функция - Управление доступностью блока
// 
// Возвращаемое значение:
//  Булево - Если Истина, то виджет доступен
//
Функция ПОЛЬЗ1_Доступен()
	
	Возврат Ложь;
	
КонецФункции

// Функция - Свойства информационного блока
//	Поля блока, перечисленные в методе должны совпадать с реквизитами формы
// 
// Возвращаемое значение:
//  Строка - поля блока через ","
//
Функция СвойстваПОЛЬЗ1()
	Перем сСвойства;
	
	сСвойства = "ПОЛЬЗ1_Заголовок, ПОЛЬЗ1_Данные";
	
	Возврат сСвойства;
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ПОЛЬЗ1(Параметры) Экспорт
	Перем Шрифт, ЦветТекста, стДанныеБлока, фсДанные, фсЗаголовок;
	
	Если Параметры.Инициализация Тогда
		Возврат;
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	стДанныеБлока = Новый Структура();
	фсЗаголовок = ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПОЛЬЗ1());
	стДанныеБлока.Вставить("ПОЛЬЗ1_Заголовок", фсЗаголовок);
	фсДанные = Новый ФорматированнаяСтрока("Информация виджета пользователя", Шрифт, ЦветТекста);
	стДанныеБлока.Вставить("ПОЛЬЗ1_Данные", фсДанные);
	
	ПоместитьВоВременноеХранилище(стДанныеБлока, Параметры.АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьПОЛЬЗ1(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПОЛЬЗ1(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПОЛЬЗ1(),
		"БлокиИнформационнойПанели.ПОЛЬЗ1",,
		СвойстваПОЛЬЗ1());
	
КонецПроцедуры
	
#КонецОбласти

#Область ПОЛЬЗ2

// Функция - Управление доступностью блока
// 
// Возвращаемое значение:
//  Булево - Если Истина, то виджет доступен
//
Функция ПОЛЬЗ2_Доступен()
	
	Возврат Ложь;
	
КонецФункции

// Функция - Свойства информационного блока
//	Поля блока, перечисленные в методе должны совпадать с реквизитами формы
// 
// Возвращаемое значение:
//  Строка - поля блока через ","
//
Функция СвойстваПОЛЬЗ2()
	Перем сСвойства;
	
	сСвойства = "ПОЛЬЗ2_Заголовок, ПОЛЬЗ2_Данные";
	
	Возврат сСвойства;
КонецФункции

// Помещает во временное хранилище данные блока
//
// Параметры:
//   Параметры - Структура
//     * АдресХранилища - Строка - адрес хранилища результата
//     * Организация - СправочникСсылка.Организации - отбор по организации
//     * ВариантОкругления - Число - 1 - округлять до целых рублей, 1000 - до тысяч 
//     * ПоказыватьСравнениеСПрошлымГодом - Булево - необходимость сравнения с показателями прошлого года
//     * Инициализация - Истина - заполнить только статическими данными
//
Процедура ПОЛЬЗ2(Параметры) Экспорт	
	Перем Шрифт, ЦветТекста, стДанныеБлока, фсДанные, фсЗаголовок;
	
	Если Параметры.Инициализация Тогда
		Возврат;
	КонецЕсли;
	
	Шрифт = ШрифтыСтиля.ШрифтТекстаИнформационнойПанели;
	ЦветТекста = ЦветаСтиля.ЦветТекстаИнформационнойПанели;
	
	стДанныеБлока = Новый Структура();
	фсЗаголовок = ЗаголовокБлока(БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПОЛЬЗ1());
	стДанныеБлока.Вставить("ПОЛЬЗ2_Заголовок", фсЗаголовок);
	фсДанные = Новый ФорматированнаяСтрока("Информация виджета пользователя", Шрифт, ЦветТекста);
	стДанныеБлока.Вставить("ПОЛЬЗ2_Данные", фсДанные);
	
	ПоместитьВоВременноеХранилище(стДанныеБлока, Параметры.АдресХранилища);
	
КонецПроцедуры

Процедура ДобавитьПОЛЬЗ2(ТаблицаБлоков)
	
	Добавить(ТаблицаБлоков,
		БлокиИнформационнойПанелиКлиентСервер.ИмяБлокаПОЛЬЗ2(),
		БлокиИнформационнойПанелиКлиентСервер.ТекстЗаголовкаПОЛЬЗ2(),
		"БлокиИнформационнойПанели.ПОЛЬЗ2",,
		СвойстваПОЛЬЗ2());
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти
